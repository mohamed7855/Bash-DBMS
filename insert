#!/usr/bin/bash


function insert() {
  
    # Prompt user for table name

    while true; do
        read -p "Enter table Name: " tablename

        if [[ -f "../.db/$name/$tablename" ]]; then
      break;
      else
        echo "Table $tablename does not exist."
        fi
        done
        
 

while true; do
    # Read col_name & datatype from table file (the first line)
    tablepath="../.db/$name/$tablename"

    # Get the first line from the file
    firstline=$(head -n 1 "$tablepath")

    # Extract column names and data types
    IFS='|' read -ra columns <<< "$firstline"

    # Loop through columns array and extract col_name and data_type
    for i in "${columns[@]}"; do
        IFS=':' read -r col_name data_type <<< "$i"

        # Prompt user for column values and validate data type
        while true; do
            read -p "Enter value for $col_name [$data_type]: " value

            # Validate data type
            if [[ "$data_type" == "INT" && ! "$value" =~ ^[0-9]+$ ]]; then
                echo "Invalid input. $col_name should be of type $data_type."
            elif [[ "$data_type" == "STRING" && ! "$value" =~ ^[A-Za-z0-9_]*$ ]]; then
                echo "Invalid input. $col_name should be of type $data_type."
            else
               echo -n "$value|" >> "../.db/$name/$tablename"
              

                break  # Break the inner loop if the input is valid
            fi
        done

        # Append dot after the last input
        if [[ $col_name == "${columns[-1]%%:*}" ]]; then
            echo  "." >> "../.db/$name/$tablename"
              
        fi

        echo "Column Name: $col_name, Data Type: $data_type, Value: $value"
    done

  

    break
done


                    # Check uniqueness of primary key
                  

                    # Add value to the values array
                 
        
           
}


insert
